# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven
on: 
  workflow_dispatch:
env:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          
jobs:
  startrunner:
    runs-on: ubuntu-latest
    steps:
      - name: test
        continue-on-error: true          # make the step always success
        id: test
        run: |
          exit 1                         # let's say 1st failed. for you, here could be mvn deploy command.
      - name: retry
        continue-on-error: true
        id: retry1
        if: steps.test.outcome=='failure'         # check the step outcome, retry 1st time
        run: |
          exit 1                                # if it fails again. if it's succeeds, the latter steps will be skipped, and status is successful.
      - name: retry 2
        continue-on-error: true
        id: retry2
        if: steps.retry1.outcome=='failure'   # check the step outcome, retry 2nd time
        run: |
          echo retry 2nd time
          exit 1                                            # fail again
      - name: retry 3
        continue-on-error: true
        id: retry3
        if: steps.retry2.outcome=='failure'      # check the step outcome, retry 3rd time
        run: |
          echo retry 3rd time                 # it passed in retry 3
      - name: set the status              # set the workflow status if command failed
        if: always()
        run: |
          if ${{ steps.test.outcome=='success' || steps.retry1.outcome=='success' || steps.retry2.outcome=='success' || steps.retry3.outcome=='success' }}; then
             echo fine
          else
             exit 1
          fi
   
         


         
         
             
   
           
  
      
  
    
