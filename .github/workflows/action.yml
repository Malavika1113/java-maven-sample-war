name: Start Runner
on: 
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DEFAULT_REGION:
        required: true
    outputs:
      runner:
        description: "The runner output string"
        value: ${{ jobs.startrunner.outputs.runner }}
        
env:
           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          
jobs:
  startrunner:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.readid.outputs.runner }}
      runnerflag: ${{ steps.readid.outputs.flag }}
    steps:
      - uses: actions/checkout@v3
      - name: test
        id: readid
        #continue-on-error: true 
        run: |
             retry=0
             maxRetries=5
             retryInterval=60
             n=0
             until [[ ${retry} -ge ${maxRetries} || $n -gt 0 ]]
             do
               aws s3 cp s3://instidbucket/id/instid.txt ${{ github.workspace }}/id.txt --region us-west-1
               input='${{ github.workspace }}/id.txt'
               sed 's/\r$//' ${{ github.workspace }}/id.txt > input.txt
               echo "" >> input.txt
                 while IFS="\n" read -r line
                 do 
                   status=$(aws ec2 describe-instance-status --region us-west-1 --instance-id $line --include-all-instances | jq -r '.InstanceStatuses[] | .InstanceState | .Name')
                   if [ "$status" == "stopped" ];then
                     aws ec2 start-instances --region us-west-1 --instance-ids $line
                     echo "::set-output name=runner::$line"
                     echo "::set-output name=flag::true"
                     n=1
                     break
                   fi
                   echo "::set-output name=flag::false"
                 done < input.txt
               retry=$[${retry}+1]
               echo "Retrying [${retry}/${maxRetries}] in ${retryInterval}(s) "
               sleep ${retryInterval}
               done
               if [ ${retry} -ge ${maxRetries} ]; then
                 echo "Failed after ${maxRetries} attempts!"
                 exit 1
               fi
